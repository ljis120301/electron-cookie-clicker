{"version":3,"file":"preload.js","mappings":"CAAA,SAA2CA,EAAMC,GAChD,GAAsB,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,SACb,GAAqB,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,OACP,CACJ,IAAIK,EAAIL,IACR,IAAI,IAAIM,KAAKD,GAAuB,iBAAZJ,QAAuBA,QAAUF,GAAMO,GAAKD,EAAEC,EACvE,CACA,CATD,CASGC,QAAQ,I,mBCTX,MAAM,EAA+BC,QAAQ,YCEvCC,EAAU,CACdC,IAAAA,CAAKC,EAAiBC,GACpBC,EAAAA,YAAYH,KAAKC,EAASC,EAC5B,EACAE,EAAAA,CAAGH,EAAiBI,GAClB,MAAMC,EAAeA,CAACC,KAA6BC,IACjDH,KAAYG,GAGd,OAFAL,EAAAA,YAAYC,GAAGH,EAASK,GAEjB,KACLH,EAAAA,YAAYM,eAAeR,EAASK,EAAa,CAErD,G,OAGFI,EAAAA,cAAcC,kBAAkB,MAAOZ,G","sources":["webpack://cookie-clicker/webpack/universalModuleDefinition","webpack://cookie-clicker/external node-commonjs \"electron\"","webpack://cookie-clicker/./main/preload.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(global, () => {\nreturn ","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"electron\");","import { contextBridge, ipcRenderer, IpcRendererEvent } from 'electron'\n\nconst handler = {\n  send(channel: string, value: unknown) {\n    ipcRenderer.send(channel, value)\n  },\n  on(channel: string, callback: (...args: unknown[]) => void) {\n    const subscription = (_event: IpcRendererEvent, ...args: unknown[]) =>\n      callback(...args)\n    ipcRenderer.on(channel, subscription)\n\n    return () => {\n      ipcRenderer.removeListener(channel, subscription)\n    }\n  },\n}\n\ncontextBridge.exposeInMainWorld('ipc', handler)\n\nexport type IpcHandler = typeof handler\n"],"names":["root","factory","exports","module","define","amd","a","i","global","require","handler","send","channel","value","ipcRenderer","on","callback","subscription","_event","args","removeListener","contextBridge","exposeInMainWorld"],"sourceRoot":""}